Is It A Tree

Given an undirected graph of node_count nodes and edge_count edges, find whether it is a tree or not. The undirected edges are described by two arrays edge_start and edge_end of size edge_count each. There exists an undirected edge between the node labeled edge_start[i] and the node labeled edge_end[i] for all valid i. 



# Complete the function below
# The function accepts an INTEGER node_count, two INTEGER_ARRAYs edge_start and edge_end as parameters and 
# is expected to return a BOOLEAN
from collections import deque

def is_it_a_tree(node_count, edge_start, edge_end):
    
    adjList = [ [] for _ in range(node_count) ]
    
    for (u, v) in zip(edge_start, edge_end):
        adjList[u].append(v)
        adjList[v].append(u)
        
    visited = [-1] * node_count
    parent = [-1] * node_count
     
    # BFS / DFS
    
    def bfs(source):
        queue = deque()
        queue.append(source)
        visited[source] = 1
        
        while len(queue) > 0:
            node = queue.popleft()
            for neighbor in adjList[node]:
                if visited[neighbor] == -1: # if adj node has not been visited
                    visited[neighbor] = 1 # visit it
                    parent[neighbor] = node # mark the parent of the neighbor
                    queue.append(neighbor)
                else:
                    if neighbor != parent[node]: 
                        return True # cross edge, meaning it is a cycle for BFS
        
        return False
            
    # Outer Loop
    components = 0
    for i in range(node_count):
        if visited[i] == -1:
            components += 1
            if components > 1: # Graph isn't connected, not a tree
                return False
            if bfs(i): # Cycle found, not a tree
                return False
    return True
