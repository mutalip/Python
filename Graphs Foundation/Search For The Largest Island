Search For The Largest Island

Given a two-dimensional array containing 0s and 1s, find the size of the largest island. If there is no island return 0.

An island is a group of 1s connected vertically or horizontally.

Example One

Input: grid = [

	[1, 1, 0],

	[1, 1, 0],

	[0, 0, 1],

]

Output: 4

There are two islands:

1) [(0, 0), (0, 1), (1, 0), (1, 1)]

2) [(2, 2)]

The size of the largest island is 4.
from collections import deque

def max_island_size(grid):
    """
    Args:
        grid (List[List[int]])
    Returns:
        int
    """
    # Write your code here
    #if not grid or len(grid) == 0 or len(grid[0]) == 0:
    #    return 0
    
    row_count = len(grid)
    col_count = len(grid[0])
    
    # edge case, like in the last problem:
    accumulated = 0
    for row in grid:
        accumulated += sum(row)
    if accumulated == row_count * col_count:
        return accumulated
    
    # mutate input grid instead of using separate visited matrix
    
    # bfs
    def bfs(row, col):
        q = deque([(row, col)])
        grid[row][col] = 2
        size = 1
        while len(q) > 0:
            noder, nodec = q.popleft()
            for r, c in (noder-1,nodec), (noder, nodec-1), (noder, nodec+1), (noder+1, nodec):
                if r >= 0 and r < row_count and c >=0 and c < col_count:
                    if grid[r][c] == 1:
                        q.append((r, c))
                        grid[r][c] = 2
                        size += 1
        return size
    
    maxarea = 0
    accumulatedRemaining = accumulated
    for r in range(row_count):
        for c in range(col_count):
            if grid[r][c] == 1 and accumulatedRemaining > maxarea:
                islandArea = bfs(r, c)
                accumulatedRemaining -= islandArea
                maxarea = max(maxarea, islandArea)
    return maxarea
