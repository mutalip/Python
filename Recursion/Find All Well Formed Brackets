
Find All Well Formed Brackets



Given a positive integer n, return ALL strings of length 2*n with well formed round brackets.



Example

Input: 3

Output:

[

    "((()))",

    "(()())",

    "(())()",

    "()(())",

    "()()()"

]



Any array containing these five strings in any order is a correct output.



Notes

Input Parameters: Function has one argument, integer n.



Output: Return array of strings containing all possible well formed round brackets string of length 2*n. Order of strings in the returned array is insignificant, e.g. for n=2 both ["(())", "()()"] and ["()()", "(())"] will be accepted.

Constraints:

1 <= n <= 13
Only use round brackets. '(' and ')'.


Custom Input

Input Format: There should be one line for input, containing an integer n. If n = 3, then input should be:

3

Output Format: Letâ€™s denote the size of res is m, where res is the resultant array of string returned by the solution function.

Then, there will be m lines of output, where ith line contains res[i], denoting string at index i of res. 

For input n = 3, output will be:

((()))
(()())
(())()
()(())
()()()
# Complete the function below.

def find_all_well_formed_brackets(n):

    if not n:
        return []
    left, right, ans = n, n, []
    helper(left,right, ans, "")
    return ans

def helper(left, right, ans, string):
    if right < left:
        return
    if not left and not right:
        ans.append(string)
        return
    if left:
        helper(left-1, right, ans, string + "(")
    if right:
        helper(left, right-1, ans, string + ")")
        
