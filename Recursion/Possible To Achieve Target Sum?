# Given a set of integers and a target value k, find a non-empty subset that sums up to k.



# Example One
# Input: [2 4 8], k = 6
# Output: True

# Because 2+4=6.
# Example Two

# Input: [2 4 6], k = 5

# Output: False
# Because no subset of numbers from the input sums up to 5.

# Notes

# Input Parameters: Function has two arguments: an array of integers (their order doesnâ€™t matter) and the target value  k.
# Output: Function must return a boolean value.
# Constraints:

# 1 <= size of the input array <= 18
# -10^12 <= elements of the array, k <= 10^12
# Complete the function below.

def check_if_sum_possible(arr, k):
    result=True
    if len(arr)==1:
        if arr[0]==k:
            return True
        else:
            return False
        
    helper(arr,0,0,k,0)
    
    if not result:
        return False
    else:
        return True
        
def helper(a,i,remainder,k,count):
    if remainder == k:
        return True
    
    if i == len(a):
        return False
    

    # include
    result = helper(a,i+1,remainder+a[i],k,count+1)
    if result==True:
        return True

    # exclude 
    result=helper(a,i+1,remainder,k,count)
    return result
