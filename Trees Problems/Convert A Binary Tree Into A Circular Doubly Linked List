#Given the root node of a binary tree, convert it into a circular doubly linked list in-place. The left and the right pointers in nodes are to be used as previous and next pointers respectively in the converted circular doubly linked list. The returned circular doubly linked list should follow the same order as the in-order traversal of the given binary tree.

'''
    class TreeNode():
        def __init__(self, val=None, left_ptr=None, right_ptr=None):
            self.val = val
            self.left_ptr = left_ptr
            self.right_ptr = right_ptr

    Complete the function below.
    The function takes a TREENODE as input and is expected to return a TREENODE.
'''

def binary_tree_to_cdll(root):
    s = []
    head = prev = None
    while True:
        while root:
            s.append(root)
            root = root.left_ptr
        if s:
            root = s.pop()
            root.left_ptr = prev
            if prev:
                prev.right_ptr = root
            else:
                head = root
            prev, root = root, root.right_ptr
        else:
            break
    if prev:
        head.left_ptr = prev
        prev.right_ptr = head
    return head
