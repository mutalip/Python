# Upside Down

# Given a binary tree where every node has either 0 or 2 children and every right node is a leaf node, flip it upside down turning it into a binary tree where all left nodes are leafs.


# class TreeNode():
#    def __init__(self, val=None, left_ptr=None, right_ptr=None):
#        self.val = val
#        self.left_ptr = left_ptr
#        self.right_ptr = right_ptr

def flipUpsideDown(root):
    """Complete this function.
    Args:
        root (TreeNode): Root of the input tree
    Returns:
        TreeNode: Root of the output tree
    """
    """Complete this function.
    Args:
        root (TreeNode): Root of the input tree
    Returns:
        TreeNode: Root of the output tree
    """
    
    lastRight = None
    lastLeft = None
    
    while root:
        
        next_root = root.left_ptr
        
        next_rootLeft =  root.right_ptr
        next_rootRight = root
        
        root.right_ptr = lastRight
        root.left_ptr = lastLeft
        
        if not next_root:
            return root
