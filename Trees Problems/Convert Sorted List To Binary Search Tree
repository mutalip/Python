#Convert Sorted List To Binary Search Tree
#Given a singly linked list with elements sorted in ascending order, your task is to convert it into a height-balanced binary search tree.


"""
    For your reference:
    class SinglyLinkedListNode:
        def __init__(self, node_data):
            self.data = node_data
            self.next = None

    class TreeNode():
        def __init__(self, val=None, left_ptr=None, right_ptr=None):
            self.val = val
            self.left_ptr = left_ptr
            self.right_ptr = right_ptr

    Complete the function below.
"""


def sorted_list_to_bst(head):
    """
        Args:
         head(SinglyLinkedListNode_int32)
        Returns:
         TreeNode_in32
    """
    
    if not head:
        return None

    nums = []
    
    while head:
        nums.append(head.data)
        head = head.next
    
    def helper(nums, start, end):
        
        # base case
        if start > end:
            return None
        if start == end:
            return TreeNode(nums[start])
        
        # recursive case
        mid = (start + end) // 2
        subtreeroot = TreeNode(nums[mid])
        subtreeroot.left_ptr = helper(nums, start, mid - 1)
        subtreeroot.right_ptr = helper(nums, mid + 1, end)
        return subtreeroot
    
    return helper(nums, 0, len(nums) - 1)
