# Given a binary tree, find the number of unival subtrees. An unival tree is a tree that has the same value in every node.


# class TreeNode():
#    def __init__(self, val=None, left_ptr=None, right_ptr=None):
#        self.val = val
#        self.left_ptr = left_ptr
#        self.right_ptr = right_ptr

# complete the function below
count = 0
def singlevaluehelper(node):
    global count
    # Base condition
    if node.left_ptr is None and node.right_ptr is None:
        count = count + 1
        return True
        
    left_tree, right_tree = True, True
    if node.left_ptr is not None: 
        left_tree = singlevaluehelper(node.left_ptr) and node.left_ptr.val == node.val
    if node.right_ptr is not None: 
        right_tree = singlevaluehelper(node.right_ptr) and node.right_ptr.val == node.val
    
    if left_tree and right_tree :
        count = count + 1
    return left_tree and right_tree
        
def findSingleValueTrees(root):
    # Edge case
    if root is None: return 0
        
    singlevaluehelper(root)
    
    return count
