# PostOrder Traversal Without Recursion

# Given a binary tree, find its post-order traversal without using recursion. 

# Example:

# Input:



'''
 class TreeNode():
    def __init__(self, val=None, left_ptr=None, right_ptr=None):
        self.val = val
        self.left_ptr = left_ptr
        self.right_ptr = right_ptr
'''
# Complete the function below.
# The function takes a TREENODE as input and is expected to return an INTEGER ARRAY.
def postorder_traversal(root):
    
    if root is None:
        return []
        
    nodes = []
    
    # def dfs(node):
        
    #     if node.left_ptr is not None:
    #         dfs(node.left_ptr)
    #     if node.right_ptr is not None:
    #         dfs(node.right_ptr)
    #     nodes.append(node.val)
        
    # dfs(root)
    # return nodes
    
    stack = [root]
    
    while len(stack) != 0:
        
        curr = stack.pop()
        nodes.append(curr)
        
        if curr.left_ptr is not None:
            stack.append(curr.left_ptr)
        if curr.right_ptr is not None:
            stack.append(curr.right_ptr)
    
    res = []
    while len(nodes) != 0:
        n = nodes.pop()
        val = n.val
        res.append(val)
    return res
